//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace TeachPlan
{
    public partial class Active
    {
        #region Primitive Properties
    
        public virtual int Id
        {
            get;
            set;
        }
    
        public virtual string Name
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual Plan Plan
        {
            get { return _plan; }
            set
            {
                if (!ReferenceEquals(_plan, value))
                {
                    var previousValue = _plan;
                    _plan = value;
                    FixupPlan(previousValue);
                }
            }
        }
        private Plan _plan;
    
        public virtual Subject Subject
        {
            get { return _subject; }
            set
            {
                if (!ReferenceEquals(_subject, value))
                {
                    var previousValue = _subject;
                    _subject = value;
                    FixupSubject(previousValue);
                }
            }
        }
        private Subject _subject;
    
        public virtual ICollection<Step> Steps
        {
            get
            {
                if (_steps == null)
                {
                    var newCollection = new FixupCollection<Step>();
                    newCollection.CollectionChanged += FixupSteps;
                    _steps = newCollection;
                }
                return _steps;
            }
            set
            {
                if (!ReferenceEquals(_steps, value))
                {
                    var previousValue = _steps as FixupCollection<Step>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSteps;
                    }
                    _steps = value;
                    var newValue = value as FixupCollection<Step>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSteps;
                    }
                }
            }
        }
        private ICollection<Step> _steps;
    
        public virtual Content Content
        {
            get { return _content; }
            set
            {
                if (!ReferenceEquals(_content, value))
                {
                    var previousValue = _content;
                    _content = value;
                    FixupContent(previousValue);
                }
            }
        }
        private Content _content;
    
        public virtual Phase Phase
        {
            get { return _phase; }
            set
            {
                if (!ReferenceEquals(_phase, value))
                {
                    var previousValue = _phase;
                    _phase = value;
                    FixupPhase(previousValue);
                }
            }
        }
        private Phase _phase;
    
        public virtual Form Form
        {
            get { return _form; }
            set
            {
                if (!ReferenceEquals(_form, value))
                {
                    var previousValue = _form;
                    _form = value;
                    FixupForm(previousValue);
                }
            }
        }
        private Form _form;

        #endregion
        #region Association Fixup
    
        private void FixupPlan(Plan previousValue)
        {
            if (previousValue != null && previousValue.Active.Contains(this))
            {
                previousValue.Active.Remove(this);
            }
    
            if (Plan != null)
            {
                if (!Plan.Active.Contains(this))
                {
                    Plan.Active.Add(this);
                }
            }
        }
    
        private void FixupSubject(Subject previousValue)
        {
            if (previousValue != null && previousValue.Actives.Contains(this))
            {
                previousValue.Actives.Remove(this);
            }
    
            if (Subject != null)
            {
                if (!Subject.Actives.Contains(this))
                {
                    Subject.Actives.Add(this);
                }
            }
        }
    
        private void FixupContent(Content previousValue)
        {
            if (previousValue != null && previousValue.Actives.Contains(this))
            {
                previousValue.Actives.Remove(this);
            }
    
            if (Content != null)
            {
                if (!Content.Actives.Contains(this))
                {
                    Content.Actives.Add(this);
                }
            }
        }
    
        private void FixupPhase(Phase previousValue)
        {
            if (previousValue != null && previousValue.Actives.Contains(this))
            {
                previousValue.Actives.Remove(this);
            }
    
            if (Phase != null)
            {
                if (!Phase.Actives.Contains(this))
                {
                    Phase.Actives.Add(this);
                }
            }
        }
    
        private void FixupForm(Form previousValue)
        {
            if (previousValue != null && previousValue.Active.Contains(this))
            {
                previousValue.Active.Remove(this);
            }
    
            if (Form != null)
            {
                if (!Form.Active.Contains(this))
                {
                    Form.Active.Add(this);
                }
            }
        }
    
        private void FixupSteps(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Step item in e.NewItems)
                {
                    item.Active = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Step item in e.OldItems)
                {
                    if (ReferenceEquals(item.Active, this))
                    {
                        item.Active = null;
                    }
                }
            }
        }

        #endregion
    }
}
