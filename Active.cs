//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace TeachPlan
{
    public partial class Active
    {
        #region Primitive Properties
    
        public virtual int Id
        {
            get;
            set;
        }
    
        public virtual string Name
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<Content> Content
        {
            get
            {
                if (_content == null)
                {
                    var newCollection = new FixupCollection<Content>();
                    newCollection.CollectionChanged += FixupContent;
                    _content = newCollection;
                }
                return _content;
            }
            set
            {
                if (!ReferenceEquals(_content, value))
                {
                    var previousValue = _content as FixupCollection<Content>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupContent;
                    }
                    _content = value;
                    var newValue = value as FixupCollection<Content>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupContent;
                    }
                }
            }
        }
        private ICollection<Content> _content;
    
        public virtual Subject Subject
        {
            get { return _subject; }
            set
            {
                if (!ReferenceEquals(_subject, value))
                {
                    var previousValue = _subject;
                    _subject = value;
                    FixupSubject(previousValue);
                }
            }
        }
        private Subject _subject;
    
        public virtual ICollection<Step> Step
        {
            get
            {
                if (_step == null)
                {
                    var newCollection = new FixupCollection<Step>();
                    newCollection.CollectionChanged += FixupStep;
                    _step = newCollection;
                }
                return _step;
            }
            set
            {
                if (!ReferenceEquals(_step, value))
                {
                    var previousValue = _step as FixupCollection<Step>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupStep;
                    }
                    _step = value;
                    var newValue = value as FixupCollection<Step>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupStep;
                    }
                }
            }
        }
        private ICollection<Step> _step;
    
        public virtual ICollection<Phase> Phase
        {
            get
            {
                if (_phase == null)
                {
                    var newCollection = new FixupCollection<Phase>();
                    newCollection.CollectionChanged += FixupPhase;
                    _phase = newCollection;
                }
                return _phase;
            }
            set
            {
                if (!ReferenceEquals(_phase, value))
                {
                    var previousValue = _phase as FixupCollection<Phase>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupPhase;
                    }
                    _phase = value;
                    var newValue = value as FixupCollection<Phase>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupPhase;
                    }
                }
            }
        }
        private ICollection<Phase> _phase;
    
        public virtual Plan Plan
        {
            get { return _plan; }
            set
            {
                if (!ReferenceEquals(_plan, value))
                {
                    var previousValue = _plan;
                    _plan = value;
                    FixupPlan(previousValue);
                }
            }
        }
        private Plan _plan;
    
        public virtual ICollection<Active> ChildActives
        {
            get
            {
                if (_childActives == null)
                {
                    var newCollection = new FixupCollection<Active>();
                    newCollection.CollectionChanged += FixupChildActives;
                    _childActives = newCollection;
                }
                return _childActives;
            }
            set
            {
                if (!ReferenceEquals(_childActives, value))
                {
                    var previousValue = _childActives as FixupCollection<Active>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupChildActives;
                    }
                    _childActives = value;
                    var newValue = value as FixupCollection<Active>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupChildActives;
                    }
                }
            }
        }
        private ICollection<Active> _childActives;
    
        public virtual Active ParentActive
        {
            get { return _parentActive; }
            set
            {
                if (!ReferenceEquals(_parentActive, value))
                {
                    var previousValue = _parentActive;
                    _parentActive = value;
                    FixupParentActive(previousValue);
                }
            }
        }
        private Active _parentActive;

        #endregion
        #region Association Fixup
    
        private void FixupSubject(Subject previousValue)
        {
            if (previousValue != null && previousValue.Huodong.Contains(this))
            {
                previousValue.Huodong.Remove(this);
            }
    
            if (Subject != null)
            {
                if (!Subject.Huodong.Contains(this))
                {
                    Subject.Huodong.Add(this);
                }
            }
        }
    
        private void FixupPlan(Plan previousValue)
        {
            if (previousValue != null && previousValue.Active.Contains(this))
            {
                previousValue.Active.Remove(this);
            }
    
            if (Plan != null)
            {
                if (!Plan.Active.Contains(this))
                {
                    Plan.Active.Add(this);
                }
            }
        }
    
        private void FixupParentActive(Active previousValue)
        {
            if (previousValue != null && previousValue.ChildActives.Contains(this))
            {
                previousValue.ChildActives.Remove(this);
            }
    
            if (ParentActive != null)
            {
                if (!ParentActive.ChildActives.Contains(this))
                {
                    ParentActive.ChildActives.Add(this);
                }
            }
        }
    
        private void FixupContent(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Content item in e.NewItems)
                {
                    if (!item.Huodong.Contains(this))
                    {
                        item.Huodong.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Content item in e.OldItems)
                {
                    if (item.Huodong.Contains(this))
                    {
                        item.Huodong.Remove(this);
                    }
                }
            }
        }
    
        private void FixupStep(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Step item in e.NewItems)
                {
                    if (!item.Huodong.Contains(this))
                    {
                        item.Huodong.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Step item in e.OldItems)
                {
                    if (item.Huodong.Contains(this))
                    {
                        item.Huodong.Remove(this);
                    }
                }
            }
        }
    
        private void FixupPhase(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Phase item in e.NewItems)
                {
                    if (!item.Active.Contains(this))
                    {
                        item.Active.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Phase item in e.OldItems)
                {
                    if (item.Active.Contains(this))
                    {
                        item.Active.Remove(this);
                    }
                }
            }
        }
    
        private void FixupChildActives(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Active item in e.NewItems)
                {
                    item.ParentActive = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Active item in e.OldItems)
                {
                    if (ReferenceEquals(item.ParentActive, this))
                    {
                        item.ParentActive = null;
                    }
                }
            }
        }

        #endregion
    }
}
