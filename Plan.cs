//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;

namespace TeachPlan
{
    public partial class Plan
    {
        #region Primitive Properties

        public virtual int Id
        {
            get;
            set;
        }

        public virtual string Desc
        {
            get;
            set;
        }
        [Required]
        [Display(Name = "案例名称")]
        public virtual string Name
        {
            get;
            set;
        }
        [Display(Name = "作者")]
        public virtual string Author
        {
            get;
            set;
        }
        [Required]
        [Display(Name = "作者单位")]
        public virtual string Organiser
        {
            get;
            set;
        }
        [Display(Name = "引用次数")]
        public virtual int Refer
        {
            get;
            set;
        }
        [Display(Name = "公开")]
        public virtual bool Public
        {
            get;
            set;
        }
        [Required]
        [Display(Name = "课时名称")]
        public virtual string ClassName
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
        [Display(Name = "学科")]
        public virtual Subject Subject
        {
            get { return _subject; }
            set
            {
                if (!ReferenceEquals(_subject, value))
                {
                    var previousValue = _subject;
                    _subject = value;
                    FixupSubject(previousValue);
                }
            }
        }
        private Subject _subject;

        [Display(Name = "年级")]
        public virtual Grade Grade
        {
            get { return _grade; }
            set
            {
                if (!ReferenceEquals(_grade, value))
                {
                    var previousValue = _grade;
                    _grade = value;
                    FixupGrade(previousValue);
                }
            }
        }
        private Grade _grade;

        [Display(Name = "教材")]
        public virtual Textbook Textbook
        {
            get { return _textbook; }
            set
            {
                if (!ReferenceEquals(_textbook, value))
                {
                    var previousValue = _textbook;
                    _textbook = value;
                    FixupTextbook(previousValue);
                }
            }
        }
        private Textbook _textbook;

        public virtual ICollection<Think> Think
        {
            get
            {
                if (_think == null)
                {
                    var newCollection = new FixupCollection<Think>();
                    newCollection.CollectionChanged += FixupThink;
                    _think = newCollection;
                }
                return _think;
            }
            set
            {
                if (!ReferenceEquals(_think, value))
                {
                    var previousValue = _think as FixupCollection<Think>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupThink;
                    }
                    _think = value;
                    var newValue = value as FixupCollection<Think>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupThink;
                    }
                }
            }
        }
        private ICollection<Think> _think;

        public virtual ICollection<Ready> Ready
        {
            get
            {
                if (_ready == null)
                {
                    var newCollection = new FixupCollection<Ready>();
                    newCollection.CollectionChanged += FixupReady;
                    _ready = newCollection;
                }
                return _ready;
            }
            set
            {
                if (!ReferenceEquals(_ready, value))
                {
                    var previousValue = _ready as FixupCollection<Ready>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupReady;
                    }
                    _ready = value;
                    var newValue = value as FixupCollection<Ready>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupReady;
                    }
                }
            }
        }
        private ICollection<Ready> _ready;

        public virtual ICollection<Judge> Judge
        {
            get
            {
                if (_judge == null)
                {
                    var newCollection = new FixupCollection<Judge>();
                    newCollection.CollectionChanged += FixupJudge;
                    _judge = newCollection;
                }
                return _judge;
            }
            set
            {
                if (!ReferenceEquals(_judge, value))
                {
                    var previousValue = _judge as FixupCollection<Judge>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupJudge;
                    }
                    _judge = value;
                    var newValue = value as FixupCollection<Judge>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupJudge;
                    }
                }
            }
        }
        private ICollection<Judge> _judge;

        public virtual ICollection<Point> Point
        {
            get
            {
                if (_point == null)
                {
                    var newCollection = new FixupCollection<Point>();
                    newCollection.CollectionChanged += FixupPoint;
                    _point = newCollection;
                }
                return _point;
            }
            set
            {
                if (!ReferenceEquals(_point, value))
                {
                    var previousValue = _point as FixupCollection<Point>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupPoint;
                    }
                    _point = value;
                    var newValue = value as FixupCollection<Point>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupPoint;
                    }
                }
            }
        }
        private ICollection<Point> _point;

        public virtual ICollection<Character> Character
        {
            get
            {
                if (_character == null)
                {
                    var newCollection = new FixupCollection<Character>();
                    newCollection.CollectionChanged += FixupCharacter;
                    _character = newCollection;
                }
                return _character;
            }
            set
            {
                if (!ReferenceEquals(_character, value))
                {
                    var previousValue = _character as FixupCollection<Character>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCharacter;
                    }
                    _character = value;
                    var newValue = value as FixupCollection<Character>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCharacter;
                    }
                }
            }
        }
        private ICollection<Character> _character;

        public virtual ICollection<Target> Target
        {
            get
            {
                if (_target == null)
                {
                    var newCollection = new FixupCollection<Target>();
                    newCollection.CollectionChanged += FixupTarget;
                    _target = newCollection;
                }
                return _target;
            }
            set
            {
                if (!ReferenceEquals(_target, value))
                {
                    var previousValue = _target as FixupCollection<Target>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupTarget;
                    }
                    _target = value;
                    var newValue = value as FixupCollection<Target>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupTarget;
                    }
                }
            }
        }
        private ICollection<Target> _target;

        public virtual ICollection<Active> Active
        {
            get
            {
                if (_active == null)
                {
                    var newCollection = new FixupCollection<Active>();
                    newCollection.CollectionChanged += FixupActive;
                    _active = newCollection;
                }
                return _active;
            }
            set
            {
                if (!ReferenceEquals(_active, value))
                {
                    var previousValue = _active as FixupCollection<Active>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupActive;
                    }
                    _active = value;
                    var newValue = value as FixupCollection<Active>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupActive;
                    }
                }
            }
        }
        private ICollection<Active> _active;

        public virtual UserInfo UserInfo
        {
            get { return _userInfo; }
            set
            {
                if (!ReferenceEquals(_userInfo, value))
                {
                    var previousValue = _userInfo;
                    _userInfo = value;
                    FixupUserInfo(previousValue);
                }
            }
        }
        private UserInfo _userInfo;

        #endregion
        #region Association Fixup

        private void FixupSubject(Subject previousValue)
        {
            if (previousValue != null && previousValue.Fangan.Contains(this))
            {
                previousValue.Fangan.Remove(this);
            }

            if (Subject != null)
            {
                if (!Subject.Fangan.Contains(this))
                {
                    Subject.Fangan.Add(this);
                }
            }
        }

        private void FixupGrade(Grade previousValue)
        {
            if (previousValue != null && previousValue.Fangan.Contains(this))
            {
                previousValue.Fangan.Remove(this);
            }

            if (Grade != null)
            {
                if (!Grade.Fangan.Contains(this))
                {
                    Grade.Fangan.Add(this);
                }
            }
        }

        private void FixupTextbook(Textbook previousValue)
        {
            if (previousValue != null && previousValue.Fangan.Contains(this))
            {
                previousValue.Fangan.Remove(this);
            }

            if (Textbook != null)
            {
                if (!Textbook.Fangan.Contains(this))
                {
                    Textbook.Fangan.Add(this);
                }
            }
        }

        private void FixupUserInfo(UserInfo previousValue)
        {
            if (previousValue != null && previousValue.Plan.Contains(this))
            {
                previousValue.Plan.Remove(this);
            }

            if (UserInfo != null)
            {
                if (!UserInfo.Plan.Contains(this))
                {
                    UserInfo.Plan.Add(this);
                }
            }
        }

        private void FixupThink(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Think item in e.NewItems)
                {
                    item.Plan = this;
                }
            }

            if (e.OldItems != null)
            {
                foreach (Think item in e.OldItems)
                {
                    if (ReferenceEquals(item.Plan, this))
                    {
                        item.Plan = null;
                    }
                }
            }
        }

        private void FixupReady(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Ready item in e.NewItems)
                {
                    item.Plan = this;
                }
            }

            if (e.OldItems != null)
            {
                foreach (Ready item in e.OldItems)
                {
                    if (ReferenceEquals(item.Plan, this))
                    {
                        item.Plan = null;
                    }
                }
            }
        }

        private void FixupJudge(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Judge item in e.NewItems)
                {
                    item.Plan = this;
                }
            }

            if (e.OldItems != null)
            {
                foreach (Judge item in e.OldItems)
                {
                    if (ReferenceEquals(item.Plan, this))
                    {
                        item.Plan = null;
                    }
                }
            }
        }

        private void FixupPoint(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Point item in e.NewItems)
                {
                    item.Plan = this;
                }
            }

            if (e.OldItems != null)
            {
                foreach (Point item in e.OldItems)
                {
                    if (ReferenceEquals(item.Plan, this))
                    {
                        item.Plan = null;
                    }
                }
            }
        }

        private void FixupCharacter(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Character item in e.NewItems)
                {
                    item.Plan = this;
                }
            }

            if (e.OldItems != null)
            {
                foreach (Character item in e.OldItems)
                {
                    if (ReferenceEquals(item.Plan, this))
                    {
                        item.Plan = null;
                    }
                }
            }
        }

        private void FixupTarget(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Target item in e.NewItems)
                {
                    item.Plan = this;
                }
            }

            if (e.OldItems != null)
            {
                foreach (Target item in e.OldItems)
                {
                    if (ReferenceEquals(item.Plan, this))
                    {
                        item.Plan = null;
                    }
                }
            }
        }

        private void FixupActive(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Active item in e.NewItems)
                {
                    item.Plan = this;
                }
            }

            if (e.OldItems != null)
            {
                foreach (Active item in e.OldItems)
                {
                    if (ReferenceEquals(item.Plan, this))
                    {
                        item.Plan = null;
                    }
                }
            }
        }

        #endregion
    }
}
