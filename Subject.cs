//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace TeachPlan
{
    public partial class Subject
    {
        #region Primitive Properties
    
        public virtual int Id
        {
            get;
            set;
        }
    
        public virtual string Name
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<Plan> Plans
        {
            get
            {
                if (_plans == null)
                {
                    var newCollection = new FixupCollection<Plan>();
                    newCollection.CollectionChanged += FixupPlans;
                    _plans = newCollection;
                }
                return _plans;
            }
            set
            {
                if (!ReferenceEquals(_plans, value))
                {
                    var previousValue = _plans as FixupCollection<Plan>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupPlans;
                    }
                    _plans = value;
                    var newValue = value as FixupCollection<Plan>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupPlans;
                    }
                }
            }
        }
        private ICollection<Plan> _plans;
    
        public virtual ICollection<Active> Actives
        {
            get
            {
                if (_actives == null)
                {
                    var newCollection = new FixupCollection<Active>();
                    newCollection.CollectionChanged += FixupActives;
                    _actives = newCollection;
                }
                return _actives;
            }
            set
            {
                if (!ReferenceEquals(_actives, value))
                {
                    var previousValue = _actives as FixupCollection<Active>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupActives;
                    }
                    _actives = value;
                    var newValue = value as FixupCollection<Active>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupActives;
                    }
                }
            }
        }
        private ICollection<Active> _actives;

        #endregion
        #region Association Fixup
    
        private void FixupPlans(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Plan item in e.NewItems)
                {
                    item.Subject = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Plan item in e.OldItems)
                {
                    if (ReferenceEquals(item.Subject, this))
                    {
                        item.Subject = null;
                    }
                }
            }
        }
    
        private void FixupActives(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Active item in e.NewItems)
                {
                    item.Subject = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Active item in e.OldItems)
                {
                    if (ReferenceEquals(item.Subject, this))
                    {
                        item.Subject = null;
                    }
                }
            }
        }

        #endregion
    }
}
