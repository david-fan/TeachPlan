//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace TeachPlan
{
    public partial class Point
    {
        #region Primitive Properties
    
        public virtual int Id
        {
            get;
            set;
        }
    
        public virtual int Type
        {
            get;
            set;
        }
    
        public virtual string Content
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<Method> Method
        {
            get
            {
                if (_method == null)
                {
                    var newCollection = new FixupCollection<Method>();
                    newCollection.CollectionChanged += FixupMethod;
                    _method = newCollection;
                }
                return _method;
            }
            set
            {
                if (!ReferenceEquals(_method, value))
                {
                    var previousValue = _method as FixupCollection<Method>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupMethod;
                    }
                    _method = value;
                    var newValue = value as FixupCollection<Method>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupMethod;
                    }
                }
            }
        }
        private ICollection<Method> _method;
    
        public virtual Plan Plan
        {
            get { return _plan; }
            set
            {
                if (!ReferenceEquals(_plan, value))
                {
                    var previousValue = _plan;
                    _plan = value;
                    FixupPlan(previousValue);
                }
            }
        }
        private Plan _plan;

        #endregion
        #region Association Fixup
    
        private void FixupPlan(Plan previousValue)
        {
            if (previousValue != null && previousValue.Point.Contains(this))
            {
                previousValue.Point.Remove(this);
            }
    
            if (Plan != null)
            {
                if (!Plan.Point.Contains(this))
                {
                    Plan.Point.Add(this);
                }
            }
        }
    
        private void FixupMethod(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Method item in e.NewItems)
                {
                    item.Point = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Method item in e.OldItems)
                {
                    if (ReferenceEquals(item.Point, this))
                    {
                        item.Point = null;
                    }
                }
            }
        }

        #endregion
    }
}
